#
# main() このアクションを呼び出すときに実行されます
# @param Cloud Functions アクションは 1 つのパラメーターを受け入れます。このパラメーターは JSON オブジェクトでなければなりません。
# @return このアクションの出力。この出力は、JSON オブジェクトでなければなりません。
#
# README
# IBM Cloud の PaaS使用料金を取得して、SlackにPostする IBM Cloud FunctionsのPythonScriptです。 
#
# [Overview]
# IBM_Cloud_API <--(python.Requests)-- IBM Cloud Functions --(Webhook)--> Slack
#
# [Functions parameter]
# CLOUD_APIKEY: https://cloud.ibm.com/iam/serviceids から サービスID作ってAPIKEY取得
# SLACK_WEBHOOK_URL: https://slack.com/apps/A0F7XDUAZ--incoming-webhook-?next_id=0 から取得
# ACCOUNT_NAME: Slack投稿文内で使用。なんでもよい。
# ACCOUNTID: https://cloud.ibm.com/account/settings から取得
#
import sys
import os
import requests
import json
import datetime

MONTH = datetime.date.today().strftime('%Y-%m')
DAY   = datetime.date.today().strftime('%Y/%m/%d')

TOKEN_URL   = 'https://iam.cloud.ibm.com/identity/token'
BILLING_URL = 'https://metering-reporting.ng.bluemix.net'


## APIKEYからBEARER TOKENを生成
def get_bearer_token(CLOUD_APIKEY):
    payload={'grant_type':'urn:ibm:params:oauth:grant-type:apikey','apikey':CLOUD_APIKEY}
    header = {'Content-Type': 'application/x-www-form-urlencoded', 'Accept':'application/json'}
    r = requests.post("https://iam.cloud.ibm.com/identity/token", params=payload, headers=header)
    return r.json()['access_token']

def main(dict):

    # Functionsのパラメータから変数取得
    CLOUD_APIKEY = dict['CLOUD_APIKEY']
    SLACK_WEBHOOK_URL = dict['SLACK_WEBHOOK_URL'] 
    ACCOUNT_NAME = dict['ACCOUNT_NAME']
    ACCOUNTID = dict['ACCOUNTID']
    
    # BEARER TOKENに変換して、ヘッダにセット
    ACCESS_TOKEN = get_bearer_token(CLOUD_APIKEY)
    header = {'Authorization': ACCESS_TOKEN}
    
    # 取得したい値に応じて、IBM Cloudのこのあたりの調整が必要
    apiurl = BILLING_URL+ '/v4/accounts/' +ACCOUNTID+ '/summary/' +MONTH
    rr = requests.get(apiurl, headers=header)
    amount = round(rr.json()['resources']['billable_cost'], 1)
    text = "%s 時点 での %s の IBM Cloud 見積もり合計 は $ %s です" % (DAY, ACCOUNT_NAME, amount)
    
    # 金額に応じて添付バー？の色を変更
    if float(amount) >= 1000.0:
        color = "#ff0000"        # RED
    elif float(amount) > 500.0:
        color = "warning"        # YELLOW
    else:
        color = "good"           # GREEN

    # slack向けに整形
    payload_dic = {
      "fallback": text,
#      "channel": "#cc-bot",
      "channel": "#kentarok_channel",
      "attachments": [
        {
          "color": color,
          "text": text,
        }
      ],
    }
    
    # slackに投稿
    req = requests.post(SLACK_WEBHOOK_URL, data=json.dumps(payload_dic))
    return payload_dic
